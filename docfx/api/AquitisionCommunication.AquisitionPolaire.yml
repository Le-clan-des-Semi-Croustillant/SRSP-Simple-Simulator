### YamlMime:ManagedReference
items:
- uid: AquitisionCommunication.AquisitionPolaire
  commentId: T:AquitisionCommunication.AquisitionPolaire
  id: AquisitionPolaire
  parent: AquitisionCommunication
  children:
  - AquitisionCommunication.AquisitionPolaire.#ctor
  - AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire(System.Collections.Generic.List{System.String})
  - AquitisionCommunication.AquisitionPolaire.ReadPolaire(System.String)
  langs:
  - csharp
  - vb
  name: AquisitionPolaire
  nameWithType: AquisitionPolaire
  fullName: AquitisionCommunication.AquisitionPolaire
  type: Class
  source:
    id: AquisitionPolaire
    path: E:\Unity\Project\SRSP-Simple-Simulator\Assets\Controller\script\Model\AquitisionCommunication\AquisitionPolaire.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: AquitisionCommunication
  summary: "\nThis class is used to load .pol file\n"
  example: []
  syntax:
    content: public class AquisitionPolaire
    content.vb: Public Class AquisitionPolaire
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AquitisionCommunication.AquisitionPolaire.#ctor
  commentId: M:AquitisionCommunication.AquisitionPolaire.#ctor
  id: '#ctor'
  parent: AquitisionCommunication.AquisitionPolaire
  langs:
  - csharp
  - vb
  name: AquisitionPolaire()
  nameWithType: AquisitionPolaire.AquisitionPolaire()
  fullName: AquitisionCommunication.AquisitionPolaire.AquisitionPolaire()
  type: Constructor
  source:
    id: .ctor
    path: E:\Unity\Project\SRSP-Simple-Simulator\Assets\Controller\script\Model\AquitisionCommunication\AquisitionPolaire.cs
    startLine: 14
  assemblies:
  - Assembly-CSharp
  namespace: AquitisionCommunication
  syntax:
    content: public AquisitionPolaire()
    content.vb: Public Sub New
  overload: AquitisionCommunication.AquisitionPolaire.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AquitisionCommunication.AquisitionPolaire.ReadPolaire(System.String)
  commentId: M:AquitisionCommunication.AquisitionPolaire.ReadPolaire(System.String)
  id: ReadPolaire(System.String)
  parent: AquitisionCommunication.AquisitionPolaire
  langs:
  - csharp
  - vb
  name: ReadPolaire(String)
  nameWithType: AquisitionPolaire.ReadPolaire(String)
  fullName: AquitisionCommunication.AquisitionPolaire.ReadPolaire(System.String)
  type: Method
  source:
    id: ReadPolaire
    path: E:\Unity\Project\SRSP-Simple-Simulator\Assets\Controller\script\Model\AquitisionCommunication\AquisitionPolaire.cs
    startLine: 24
  assemblies:
  - Assembly-CSharp
  namespace: AquitisionCommunication
  summary: "\nload a .pol file \n"
  example: []
  syntax:
    content: public Dictionary<float, Dictionary<float, float>> ReadPolaire(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.Dictionary{System.Single,System.Collections.Generic.Dictionary{System.Single,System.Single}}
      description: ''
    content.vb: Public Function ReadPolaire(filePath As String) As Dictionary(Of Single, Dictionary(Of Single, Single))
  overload: AquitisionCommunication.AquisitionPolaire.ReadPolaire*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire(System.Collections.Generic.List{System.String})
  commentId: M:AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire(System.Collections.Generic.List{System.String})
  id: ReadMultiplePolaire(System.Collections.Generic.List{System.String})
  parent: AquitisionCommunication.AquisitionPolaire
  langs:
  - csharp
  - vb
  name: ReadMultiplePolaire(List<String>)
  nameWithType: AquisitionPolaire.ReadMultiplePolaire(List<String>)
  fullName: AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    id: ReadMultiplePolaire
    path: E:\Unity\Project\SRSP-Simple-Simulator\Assets\Controller\script\Model\AquitisionCommunication\AquisitionPolaire.cs
    startLine: 64
  assemblies:
  - Assembly-CSharp
  namespace: AquitisionCommunication
  summary: "\nload multiple a .pol file\n"
  example: []
  syntax:
    content: public List<Dictionary<float, Dictionary<float, float>>> ReadMultiplePolaire(List<string> ListFilePath)
    parameters:
    - id: ListFilePath
      type: System.Collections.Generic.List{System.String}
      description: ''
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.Single,System.Collections.Generic.Dictionary{System.Single,System.Single}}}
      description: ''
    content.vb: Public Function ReadMultiplePolaire(ListFilePath As List(Of String)) As List(Of Dictionary(Of Single, Dictionary(Of Single, Single)))
  overload: AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire*
  nameWithType.vb: AquisitionPolaire.ReadMultiplePolaire(List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire(System.Collections.Generic.List(Of System.String))
  name.vb: ReadMultiplePolaire(List(Of String))
references:
- uid: AquitisionCommunication
  commentId: N:AquitisionCommunication
  name: AquitisionCommunication
  nameWithType: AquitisionCommunication
  fullName: AquitisionCommunication
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AquitisionCommunication.AquisitionPolaire.#ctor*
  commentId: Overload:AquitisionCommunication.AquisitionPolaire.#ctor
  name: AquisitionPolaire
  nameWithType: AquisitionPolaire.AquisitionPolaire
  fullName: AquitisionCommunication.AquisitionPolaire.AquisitionPolaire
- uid: AquitisionCommunication.AquisitionPolaire.ReadPolaire*
  commentId: Overload:AquitisionCommunication.AquisitionPolaire.ReadPolaire
  name: ReadPolaire
  nameWithType: AquisitionPolaire.ReadPolaire
  fullName: AquitisionCommunication.AquisitionPolaire.ReadPolaire
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.Dictionary{System.Single,System.Collections.Generic.Dictionary{System.Single,System.Single}}
  commentId: T:System.Collections.Generic.Dictionary{System.Single,System.Collections.Generic.Dictionary{System.Single,System.Single}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Single, Dictionary<Single, Single>>
  nameWithType: Dictionary<Single, Dictionary<Single, Single>>
  fullName: System.Collections.Generic.Dictionary<System.Single, System.Collections.Generic.Dictionary<System.Single, System.Single>>
  nameWithType.vb: Dictionary(Of Single, Dictionary(Of Single, Single))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Single, System.Collections.Generic.Dictionary(Of System.Single, System.Single))
  name.vb: Dictionary(Of Single, Dictionary(Of Single, Single))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire*
  commentId: Overload:AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire
  name: ReadMultiplePolaire
  nameWithType: AquisitionPolaire.ReadMultiplePolaire
  fullName: AquitisionCommunication.AquisitionPolaire.ReadMultiplePolaire
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.Single,System.Collections.Generic.Dictionary{System.Single,System.Single}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.Single,System.Collections.Generic.Dictionary{System.Single,System.Single}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Dictionary<Single, Dictionary<Single, Single>>>
  nameWithType: List<Dictionary<Single, Dictionary<Single, Single>>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.Dictionary<System.Single, System.Collections.Generic.Dictionary<System.Single, System.Single>>>
  nameWithType.vb: List(Of Dictionary(Of Single, Dictionary(Of Single, Single)))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.Dictionary(Of System.Single, System.Collections.Generic.Dictionary(Of System.Single, System.Single)))
  name.vb: List(Of Dictionary(Of Single, Dictionary(Of Single, Single)))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
